-->Variables
getgenv().AC = false;
getgenv().AR = false;
getgenv().AH = false;

local RebirthUnlocked = {}
local Egg = {}
local k = 000;
local m = 000000
-->Functions
function AutoClick()
	while getgenv().AC == true do
		local args = {
			[1] = "Main"
		}

		game:GetService("ReplicatedStorage").Events.Tap:FireServer(unpack(args))
		task.wait()
	end	
end
function AutoHatch()
	while getgenv().AH == true do
		local args = {
			[1] = {},
			[2] = getgenv().petType,
			[3] = 1
		}

		game:GetService("ReplicatedStorage").Events.HatchEgg:InvokeServer(unpack(args))
        task.wait()
	end		
end
function AutoRebirth()
	while getgenv().AR == true do
	local args = {
    	[1] = getgenv().rebirthAmount
	}

		game:GetService("ReplicatedStorage").Events.Rebirth:FireServer(unpack(args))
		task.wait()
	end
end

-->for i,v

for i,v in next, game:GetService("Players").LocalPlayer.PlayerGui.UI.Rebirth.ScrollingContainer.ScrollingFrame:GetChildren() do
    if v:IsA("TextButton") then
        local RebirthUnlockeds = v:FindFirstChild("Rebirth")
        if (string.find(RebirthUnlockeds.Text, "K")) then
            RebirthUnlockeds = tonumber(string.match(RebirthUnlockeds.Text, "(%d+)"))
            RebirthUnlockeds = string.format(RebirthUnlockeds*1000)
        
        else if (string.find(RebirthUnlockeds.Text, "M")) then
            RebirthUnlockeds = tonumber(string.match(RebirthUnlockeds.Text, "(%d+)"))
            RebirthUnlockeds = string.format(RebirthUnlockeds*1000000)

        else RebirthUnlockeds = tonumber(string.match(RebirthUnlockeds.Text, "(%d+)"))
        end
    end
        if tonumber(RebirthUnlockeds) then
            table.insert(RebirthUnlocked, RebirthUnlockeds)
        end
    end
end

for i,v in next, game:GetService("Workspace").Shops:GetChildren() do
    if v:IsA("Model") then
        table.insert(Egg, v.Name)
    end
end







local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Loco-CTO/UI-Library/main/VisionLibV2/source.lua'))()


local Window = Library:Create({
	Name = "Spades Hub | Tapping Simulator! üêæ", -- String
	Footer = "by Spade#6650", -- String
	ToggleKey = Enum.KeyCode.RightShift, -- Enum.KeyCode
	LoadedCallback = function()
		-- Function
	end,

    KeySystem = false, -- Boolean
	Key = "keyabc123", -- String
	MaxAttempts = 5, -- Integer
	DiscordLink = nil, -- String (Set it to nil if you do not have one, the button will not pop out)
	ToggledRelativeYOffset = nil -- Number (Y Offset from bottom of your screen. Set it to nil if you want it to be centred)
})

local Main = Window:Tab({
	Name = "Farming",
	Icon = "rbxassetid://11396131982",
	Color = Color3.new(1, 0, 0) -- Color3
})

local Settings = Window:Tab({
	Name = "Settings",
	Icon = "rbxassetid://4483345998",
	Color = Color3.new(1, 0, 0) -- Color3
})

local FSection = Main:Section({
	Name = "Farming" -- String
})
local RSection = Main:Section({
	Name = "Rebirths" -- String
})
local ESection = Main:Section({
	Name = "Egg's" -- String
})
local SSection = Settings:Section({
	Name = "Settings" -- String
})
local AutoClickTog = FSection:Toggle({
	Name = "AutoClicker", -- String
	Default = false, -- Boolean
	Callback = function(Bool) 
		getgenv().AC = Bool;
        AutoClick()
	end
})

local AutoRebirthTog = RSection:Toggle({
	Name = "AutoRebirth", -- String
	Default = false, -- Boolean
	Callback = function(Bool) 
		getgenv().AR = Bool;
        AutoRebirth()
	end
})

local Dropdown = RSection:Dropdown({
	Name = "AutoRebirth - Amount", -- String
	Items = RebirthUnlocked, -- Table
	Callback = function(item)
		getgenv().rebirthAmount = item;
	end
})

local AutoHatchTog = ESection:Toggle({
	Name = "AutoHatch", -- String
	Default = false, -- Boolean
	Callback = function(Bool) 
		getgenv().AH = Bool;
        AutoHatch()
	end
})

local EggDropDown = ESection:Dropdown({
	Name = "AutoHatch - Type", -- String
	Items = Egg, -- Table
	Callback = function(item)
		getgenv().petType = item;
	end
})
local QuitButton = SSection:Button({
	Name = "Close!", -- String
	Callback = function()
		Library:Destroy()
	end
})


